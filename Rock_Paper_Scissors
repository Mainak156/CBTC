import tkinter as tk
from tkinter import messagebox
import random


# Function to create a gradient background
def create_gradient(canvas, width, height, color1, color2):
    for i in range(height):
        r = int(color1[1:3], 16) + i * (int(color2[1:3], 16) - int(color1[1:3], 16)) // height
        g = int(color1[3:5], 16) + i * (int(color2[3:5], 16) - int(color1[3:5], 16)) // height
        b = int(color1[5:7], 16) + i * (int(color2[5:7], 16) - int(color1[5:7], 16)) // height
        color = f"#{r:02x}{g:02x}{b:02x}"
        canvas.create_line(0, i, width, i, fill=color)


# Define the main game window with increased size
root = tk.Tk()
root.title("Rock Paper Scissors Game")
root.geometry("600x400")  # Increase the window size

# Set the window icon
root.iconbitmap('rock-paper-scissors.png')

# Create a canvas for the gradient background
canvas = tk.Canvas(root, width=600, height=400)
canvas.pack(fill="both", expand=True)

# Create the gradient background
create_gradient(canvas, 600, 400, "#ff7f50", "#1e90ff")

# Global variables to store scores
scores = [0, 0]


# Function to check if the player choice is valid
def isValid(player_choice):
    if player_choice not in [0, 1, 2]:
        messagebox.showinfo("Invalid Choice", "Game ends!!!")
        root.destroy()


# Function to play the game
def playGame(player_choice):
    global scores
    game_choices = ['Rock', 'Paper', 'Scissors']
    comp_choice = random.randint(0, 2)
    if player_choice == comp_choice:
        result_text.set("It's a Tie!!!")
    elif (player_choice == 0 and comp_choice == 2) or (player_choice == 1 and comp_choice == 0) or (
            player_choice == 2 and comp_choice == 1):
        result_text.set(f"Computer's Choice: {game_choices[comp_choice]}\nPlayer wins")
        scores[0] += 5
    else:
        result_text.set(f"Computer's Choice: {game_choices[comp_choice]}\nComputer wins")
        scores[1] += 5
    update_scores()


# Function to update the scores on the GUI
def update_scores():
    player_score_label.config(text=f"Player's Score: {scores[0]}")
    computer_score_label.config(text=f"Computer's Score: {scores[1]}")


# Create and place widgets on the window
heading_label = tk.Label(root, text="ROCK PAPER SCISSORS", font=('Helvetica', 24, 'bold'), bg="#ff7f50")
heading_label.place(relx=0.5, rely=0.1, anchor="center")

player_score_label = tk.Label(root, text=f"Player's Score: {scores[0]}", font=('Helvetica', 14), bg="#ff7f50")
player_score_label.place(relx=0.5, rely=0.25, anchor="center")

computer_score_label = tk.Label(root, text=f"Computer's Score: {scores[1]}", font=('Helvetica', 14), bg="#ff7f50")
computer_score_label.place(relx=0.5, rely=0.35, anchor="center")

result_text = tk.StringVar()
result_label = tk.Label(root, textvariable=result_text, font=('Helvetica', 14), bg="#ff7f50")
result_label.place(relx=0.5, rely=0.45, anchor="center")

button_frame = tk.Frame(root, bg="#ff7f50")
button_frame.place(relx=0.5, rely=0.65, anchor="center")

rock_button = tk.Button(button_frame, text="ü™® Rock", command=lambda: playGame(0), width=15, font=('Helvetica', 14))
rock_button.grid(row=0, column=0, padx=10, pady=5)

paper_button = tk.Button(button_frame, text="üìÑ Paper", command=lambda: playGame(1), width=15, font=('Helvetica', 14))
paper_button.grid(row=0, column=1, padx=10, pady=5)

scissors_button = tk.Button(button_frame, text="‚úÇÔ∏è Scissors", command=lambda: playGame(2), width=15,
                            font=('Helvetica', 14))
scissors_button.grid(row=0, column=2, padx=10, pady=5)

# Run the main event loop
root.mainloop()
